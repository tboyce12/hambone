Parameters:

  KeyName:
    Type: String
    Description: "Key name for EC2 instance"

  BucketName:
    Type: String
    Description: "Name of the S3 bucket to use for data"

  SnapshotId:
    Type: String
    Description: "Snapshot ID for data volume"
    Default: ""

  InstanceType:
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t3.medium
    Description: "EC2 instance type"

  AMIID:
    Type: AWS::EC2::Image::Id
    Description: "AMI ID"

Resources:

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  MyNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC

  InboundRuleSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  InboundRuleUDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 110
      Protocol: 17 # UDP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 2302
        To: 2306

  InboundRuleTCP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 120
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 2302
        To: 2306

  InboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 130
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  InboundRuleTeamspeakUdp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 140
      Protocol: 17 # UDP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9987
        To: 9987

  InboundRuleTeamspeakTcp10011:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 150
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 10011
        To: 10011

  InboundRuleTeamspeakTcp30033:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 160
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 30033
        To: 30033

  OutboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  MyNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref MyNACL

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH and Arma ports"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 2302
          ToPort: 2306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2302
          ToPort: 2306
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref MyInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref MySecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
        - DeviceName: /dev/xvdf
          Ebs:
            SnapshotId: !Ref SnapshotId
            VolumeSize: 32
            VolumeType: gp3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          set -e

          # Update system
          dnf update -y

          dnf install docker -y
          usermod -aG docker ec2-user
          systemctl start docker
          systemctl enable docker

          curl -SL \
              https://github.com/docker/compose/releases/download/v2.33.0/docker-compose-linux-x86_64 \
              -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Detect, format, mount data volume
          DATA_DEVICE=/dev/xvdf
          MOUNT_POINT=/mnt/data
          test -b $DATA_DEVICE || (echo "No data device!" >&2 && exit 1)
          blkid $DATA_DEVICE || mkfs.ext4 $DATA_DEVICE
          mkdir -p $MOUNT_POINT
          grep -qs '$MOUNT_POINT ' /proc/mounts                            \
              || mount $DATA_DEVICE $MOUNT_POINT
          grep -q "$DATA_DEVICE $MOUNT_POINT ext4" /etc/fstab              \
              || echo "$DATA_DEVICE $MOUNT_POINT ext4 defaults,nofail 0 2" \
              >> /etc/fstab

          # Startup script
          cat <<EOF > /usr/local/bin/hambone.sh
          #!/bin/bash
          set -x
          set -e

          # Get container userdata
          rm -rf /mnt/data/userdata
          aws s3 cp s3://${BucketName}/dockerdata.tar.gz \
              /mnt/data/dockerdata.tar.gz
          tar -xvf /mnt/data/dockerdata.tar.gz -C /mnt/data/
          rm -f /mnt/data/dockerdata.tar.gz

          # Fix permissions
          mkdir -p /mnt/data/containerdata
          chmod 777 /mnt/data/containerdata
          mkdir -p /mnt/data/userdata
          chmod 777 /mnt/data/userdata

          # Pull and run image
          aws ecr get-login-password --region ${AWS::Region}               \
            | docker login --username AWS --password-stdin                 \
                ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          docker pull                                                      \
            ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hambone
          docker tag                                                       \
            ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hambone \
            hambone
          docker-compose                                                   \
            -f /mnt/data/docker-compose-prod.yml up hambone teamspeak
          EOF

          # Startup service unit
          cat <<EOF > /etc/systemd/system/hambone.service
          [Unit]
          Description=Hambone Cloud Server
          After=network-online.target docker.service
          Requires=network-online.target docker.service
          [Service]
          ExecStart=/usr/local/bin/hambone.sh
          [Install]
          WantedBy=multi-user.target
          EOF
          chmod +x /usr/local/bin/hambone.sh
          systemctl enable hambone.service
          systemctl start hambone.service

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyEC2Role

  MyEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MyPolicyS3Read
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
        - PolicyName: MyPolicyECRRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      RepositoryName: hambone

Outputs:

  AccountID:
    Description: "AWS Account ID"
    Value: !Sub "${AWS::AccountId}"
  Region:
    Description: "CFN Region"
    Value: !Sub "${AWS::Region}"
  InstanceID:
    Description: "ID of the EC2 instance"
    Value: !Ref MyEC2Instance
  BucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref BucketName
